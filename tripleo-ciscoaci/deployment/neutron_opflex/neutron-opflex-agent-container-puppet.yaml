heat_template_version: rocky
  
description: >
  Cisco ACI neutron-opflex-agent containerized service

parameters:
  ContainerNeutronOpflexAgentImage:
    description: image
    type: string
  ContainerNeutronConfigImage:
    description: The container image to use for the neutron config_volume
    type: string
  DockerOpenvswitchUlimit:
    default: ['nofile=16384']
    description: ulimit for Openvswitch Container
    type: comma_delimited_list
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean
  NeutronBridgeMappings:
    description: >
      The OVS logical->physical bridge mappings to use. See the Neutron
      documentation for details. Defaults to mapping br-ex - the external
      bridge on hosts - to a physical name 'datacentre' which can be used
      to create provider networks (and we use this for the default floating
      network) - if changing this either use different post-install network
      scripts or be sure to keep 'datacentre' as a mapping network name.
    type: comma_delimited_list
    default: "datacentre:br-ex"
  NeutronOVSFirewallDriver:
    default: 'neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver'
    description: |
      Configure the classname of the firewall driver to use for implementing
      security groups. Possible values depend on system configuration. Some
      examples are: noop, openvswitch, iptables_hybrid. The default value of an
      empty string will result in a default supported configuration.
    type: string
resources:
  NeutronBase:
    type: /usr/share/openstack-tripleo-heat-templates/deployment/neutron/neutron-base.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  # Merging role-specific parameters (RoleParameters) with the default parameters.
  # RoleParameters will have the precedence over the default parameters.
  RoleParametersValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_replace:
          - map_replace:
            - neutron::agents::ml2::ovs::bridge_mappings: NeutronBridgeMappings
              #vswitch::ovs::enable_hw_offload: OvsHwOffload
            - values: {get_param: [RoleParameters]}
          - values:
              NeutronBridgeMappings: {get_param: NeutronBridgeMappings}
              #OvsHwOffload: {get_param: OvsHwOffload}

  ContainersCommon:
    type: /usr/share/openstack-tripleo-heat-templates/deployment/containers-common.yaml

outputs:
  role_data:
    description: Role data for the Neutron OVS agent service.
    value:
      service_name: neutron_opflex_agent
      config_settings:
        map_merge:
          - get_attr: [NeutronBase, role_data, config_settings]
          - get_attr: [RoleParametersValue, value]
          - neutron::agents::ml2::ovs::local_ip: {get_param: [ServiceNetMap, NeutronTenantNetwork]}
            tripleo.neutron_opflex_agent.firewall_rules:
              '297 opflex vxlan networks':
                proto: 'udp'
                dport: 8472
              '298 opflex igmp accept':
                proto: 'igmp'
      puppet_config:
        config_volume: neutron_opflex
        puppet_tags:
        step_config: |
          include ::tripleo::profile::base::ciscoaci_neutron_opflex
        config_image: {get_param: ContainerNeutronOpflexAgentImage}
        # We need to mount /run for puppet_config step. This is because
        # puppet-vswitch runs the commands "ovs-vsctl list open_vswitch ."
        # when running vswitch::ovs::enable_hw_offload: true
        # ovs-vsctl talks to the ovsdb-server (hosting conf.db)
        # on the unix domain socket - /run/openvswitch/db.sock
        volumes:
          - /lib/modules:/lib/modules:ro
          - /run/openvswitch:/run/openvswitch
          - /etc/os-net-config:/etc/os-net-config:ro
      kolla_config:
        /var/lib/kolla/config_files/ciscoaci_neutron_opflex_agent.json:
          command: /bin/supervisord -c /etc/neutron/neutron_opflex_supervisord.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/neutron
              owner: neutron:neutron
              recurse: true
            - path: /run/opflex
              owner: neutron:neutron
              recurse: true
            - path: /var/lib/neutron
              owner: neutron:neutron
              recurse: true
      docker_config_scripts: {get_attr: [ContainersCommon, container_config_scripts]}
      docker_config:
        step_4:
          ciscoaci_neutron_opflex_agent:
            start_order: 18
            image: {get_param: ContainerNeutronOpflexAgentImage}
            net: host
            pid: host
            privileged: true
            restart: always
            depends_on:
              - openvswitch.service
            healthcheck:
              test: /etc/neutron/neutron_opflex_healthcheck
            ulimit: {get_param: DockerOpenvswitchUlimit}
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/ciscoaci_neutron_opflex_agent.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/neutron_opflex/:/var/lib/kolla/config_files/src:ro
                  - /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf:/etc/neutron/neutron.conf:ro
                  - /var/lib/config-data/puppet-generated/neutron/etc/neutron/metadata_agent.ini:/etc/neutron/metadata_agent.ini:ro
                  - /lib/modules:/lib/modules:ro
                  - /run/openvswitch/:/run/openvswitch/:shared,z
                  - /run/netns:/run/netns:shared
                  - /var/log/containers/neutron:/var/log/neutron
                  - /var/lib/neutron:/var/lib/neutron:shared,z
                  - /var/lib/opflex/files:/var/lib/opflex-agent-ovs:shared,z
                  - /var/lib/opflex/sockets:/run/opflex:shared,z
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
      host_prep_tasks:
            - name: create /run/netns with temp namespace
              command: ip netns add ns_temp2
              register: ipnetns_add_result
              ignore_errors: True
            - name: remove temp namespace
              command: ip netns delete ns_temp2
              ignore_errors: True
              when: ipnetns_add_result.rc == 0
            - name: Check for opflex persistent directory structure
              stat:
                path: /var/lib/opflex
              register: opflex_path

            - block:
              - name: create persistent directories
                file:
                  path: "{{ item.path }}"
                  state: directory
                  setype: "{{ item.setype }}"
                  mode: "{{ item.mode|default(omit) }}"
                with_items:
                  - { 'path': /var/lib/opflex/files/endpoints, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/services, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/ids, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/mcast, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/droplog, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/faults, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/restarts, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/sockets, 'setype': svirt_sandbox_file_t }
              when:
                - not opflex_path.stat.exists

            - block:
              - name: Copy in cleanup script
                copy:
                  content: {get_file: /usr/share/openstack-tripleo-heat-templates/deployment/neutron/neutron-cleanup}
                  dest: '/usr/libexec/neutron-cleanup'
                  force: yes
                  mode: '0755'
              - name: Copy in cleanup service
                copy:
                  content: {get_file: /usr/share/openstack-tripleo-heat-templates/deployment/neutron/neutron-cleanup.service}
                  dest: '/usr/lib/systemd/system/neutron-cleanup.service'
                  force: yes
              - name: Enabling the cleanup service
                service:
                  name: neutron-cleanup
                  enabled: yes

      external_upgrade_tasks:
        - when:
            - step|int == 1
          tags:
            - never
            - system_upgrade_transfer_data
            - system_upgrade_stop_services
          block:
            - name: Stop neutron-opflex container
              import_role:
                name: tripleo-container-stop
              vars:
                tripleo_containers_to_stop:
                  - ciscoaci_neutron_opflex_agent
                tripleo_delegate_to: "{{ groups['neutron_api'] | default([]) }}"

