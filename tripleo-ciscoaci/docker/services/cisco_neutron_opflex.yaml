heat_template_version: queens

description: >
  OpenStack Cisco Aci neutron opflex service

parameters:
  DockerNeutronOpflexAgentImage:
    description: image
    type: string
  DockerNeutronConfigImage:
    description: The container image to use for the neutron config_volume
    type: string
  DockerOpenvswitchUlimit:
    default: ['nofile=1024']
    description: ulimit for Openvswitch Container
    type: comma_delimited_list
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
    type: /usr/share/openstack-tripleo-heat-templates/docker/services/containers-common.yaml

  NeutronOpflexAgentBase:
    type:  /opt/ciscoaci-tripleo-heat-templates/puppet/services/neutron-opflex-agent.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for Neutron openvswitch service
    value:
      service_name: {get_attr: [NeutronOpflexAgentBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [NeutronOpflexAgentBase, role_data, config_settings]
      logging_source: {get_attr: [NeutronOpflexAgentBase, role_data, logging_source]}
      logging_groups: {get_attr: [NeutronOpflexAgentBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [NeutronOpflexAgentBase, role_data, service_config_settings]}
      puppet_config:
        config_volume: neutron_opflex
        puppet_tags:  
        step_config:
          get_attr: [NeutronOpflexAgentBase, role_data, step_config]
        config_image: {get_param: DockerNeutronOpflexAgentImage}
        # We need to mount /run for puppet_config step. This is because
        # puppet-vswitch runs the commands "ovs-vsctl list open_vswitch ."
        # when running vswitch::ovs::enable_hw_offload: true
        # ovs-vsctl talks to the ovsdb-server (hosting conf.db)
        # on the unix domain socket - /run/openvswitch/db.sock
        volumes:
          - /lib/modules:/lib/modules:ro
          - /run/openvswitch:/run/openvswitch
          - /usr/bin:/usr/bin
          - /usr/lib/python2.7:/usr/lib/python2.7
          - /sys/class/net:/sys/class/net
          - /sys/devices:/sys/devices
      kolla_config:
        /var/lib/kolla/config_files/ciscoaci_neutron_opflex_agent.json:
          command: /bin/supervisord -c /etc/neutron/neutron_opflex_supervisord.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/neutron
              owner: neutron:neutron
              recurse: true
            - path: /var/lib/neutron
              owner: neutron:neutron
              recurse: true
      docker_config_scripts: {get_attr: [ContainersCommon, docker_config_scripts]}
      docker_config:
        step_4:
          ciscoaci_neutron_opflex_agent:
            start_order: 18
            image: {get_param: DockerNeutronOpflexAgentImage}
            net: host
            pid: host
            privileged: true
            restart: always
            healthcheck:
              test: /etc/neutron/neutron_opflex_healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/ciscoaci_neutron_opflex_agent.json:/var/lib/kolla/config_files/config.json:ro
                  - /lib/modules:/lib/modules:ro
                  - /run/openvswitch:/run/openvswitch
                  - /var/lib/config-data/puppet-generated/neutron_opflex/:/var/lib/kolla/config_files/src:ro
                  - /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf:/etc/neutron/neutron.conf:ro
                  - /var/lib/config-data/puppet-generated/neutron/etc/neutron/metadata_agent.ini:/etc/neutron/metadata_agent.ini:ro
                  - /var/lib/neutron:/var/lib/neutron
                  - /var/log/containers/neutron:/var/log/neutron
                  - /var/run/openvswitch/:/var/run/openvswitch/
                  - /run/netns:/run/netns:shared
                  - /run/openvswitch:/run/openvswitch
                  - /lib/modules:/lib/modules:ro
                  - /var/lib/opflex/files:/var/lib/opflex-agent-ovs
                  - /var/lib/opflex/sockets:/run/opflex
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      metadata_settings:
        get_attr: [NeutronOpflexAgentBase, role_data, metadata_settings]
      host_prep_tasks:
            - name: create /run/netns with temp namespace
              command: ip netns add ns_temp2
              register: ipnetns_add_result
              ignore_errors: True
            - name: remove temp namespace
              command: ip netns delete ns_temp2
              ignore_errors: True
              when: ipnetns_add_result.rc == 0
            - name: Check for opflex persistent directory structure
              stat:
                path: /var/lib/opflex
              register: opflex_path

            - block:
              - name: create persistent directories
                file:
                  path: "{{ item.path }}"
                  state: directory
                  setype: "{{ item.setype }}"
                  mode: "{{ item.mode|default(omit) }}"
                with_items:
                  - { 'path': /var/lib/opflex/files/endpoints, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/services, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/ids, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/mcast, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/droplog, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/files/faults, 'setype': svirt_sandbox_file_t }
                  - { 'path': /var/lib/opflex/sockets, 'setype': svirt_sandbox_file_t }
              when:
                - not opflex_path.stat.exists
            - name: Check for opflex restart directory
              stat:
                path: /var/lib/opflex/files/restarts
              register: opflex_restart_path
            - block:
              - name: create opflex restart directory
                file:
                  path: "{{ item.path }}"
                  state: directory
                  setype: "{{ item.setype }}"
                  mode: "{{ item.mode|default(omit) }}"
                with_items:
                  - { 'path': /var/lib/opflex/files/restarts, 'setype': svirt_sandbox_file_t }
              when:
                - not opflex_restart_path.stat.exists

      upgrade_tasks:
        list_concat:
          - get_attr: [NeutronOpflexAgentBase, role_data, ovs_upgrade_tasks]
          -
            - name: Check if neutron_opflex_agent is deployed
              command: systemctl is-enabled --quiet neutron-opflex-agent
              tags: common
              ignore_errors: True
              register: neutron_opflex_agent_enabled
            - name: "PreUpgrade step0,validation: Check service neutron-opflex-agent is running"
              command: systemctl is-active --quiet neutron-opflex-agent
              when:
                - step|int == 0
                - neutron_opflex_agent_enabled.rc == 0
              tags: validation
            - name: Stop and disable neutron_opflex_agent service
              when:
                - step|int == 2
                - neutron_opflex_agent_enabled.rc == 0
              service: name=neutron-opflex-agent state=stopped enabled=no

            - name: Set fact for removal of neutron-opflex-agent package
              when: step|int == 2
              set_fact:
                remove_neutron_opflex_package: {get_param: UpgradeRemoveUnusedPackages}
            - name: Remove neutron-opflex-agent package if operator requests it
              yum: name=neutron-opflex-agent state=removed
              ignore_errors: True
              when:
                - step|int == 2
                - remove_neutron_opflex_package|bool

      update_tasks:
      fast_forward_upgrade_tasks:
        - name: Remove neutron-ml2-driver-apic package
          yum: name=neutron-ml2-driver-apic state=removed
          ignore_errors: True
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Check if neutron_opflex_agent is deployed
          command: systemctl is-enabled --quiet neutron-opflex-agent
          ignore_errors: True
          register: neutron_opflex_agent_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact neutron_opflex_agent_enabled
          set_fact:
            neutron_opflex_agent_enabled: "{{ neutron_opflex_agent_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Stop neutron_opflex_agent
          service: name=neutron-opflex-agent state=stopped enabled=no
          when:
            - step|int == 1
            - release == 'ocata'
            - neutron_opflex_agent_enabled|bool
        - name: Check if neutron_opflex_agent is deployed
          command: systemctl is-enabled --quiet neutron-opflex-agent
          ignore_errors: True
          register: neutron_opflex_agent_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact neutron_opflex_agent_enabled
          set_fact:
            neutron_opflex_agent_enabled: "{{ neutron_opflex_agent_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Stop neutron_opflex_agent
          service: name=neutron-opflex-agent state=stopped enabled=no
          when:
            - step|int == 1
            - release == 'ocata'
            - neutron_opflex_agent_enabled|bool
        - name: stop metadata agent
          command: supervisorctl -c /var/lib/neutron/opflex_agent/metadata.conf stop metadata-agent
          ignore_errors: True
          when:
            - step|int == 1
            - release == 'ocata'
            - neutron_opflex_agent_enabled|bool
        - name: stop opflex state watcher
          command: supervisorctl -c /var/lib/neutron/opflex_agent/metadata.conf stop opflex-state-watcher
          ignore_errors: True
          when:
            - step|int == 1
            - release == 'ocata'
            - neutron_opflex_agent_enabled|bool
        - name: stop opflex ep watcher
          command: supervisorctl -c /var/lib/neutron/opflex_agent/metadata.conf stop opflex-ep-watcher
          ignore_errors: True
          when:
            - step|int == 1
            - release == 'ocata'
            - neutron_opflex_agent_enabled|bool
        - name: neutron opflex agent package update
          shell: yum -y update neutron-opflex-agent
          when:
            - step|int == 6
